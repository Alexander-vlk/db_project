name: Django CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      neo4j:
        image: neo4j:5.12
        env:
          NEO4J_AUTH: "neo4j/testpassword"
        options: >-
          --health-cmd="cypher-shell -u neo4j -p testpassword 'RETURN 1'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          - 7474:7474
          - 7687:7687

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for Neo4j to be ready
        run: |
          until cypher-shell -a bolt://localhost:7687 -u neo4j -p testpassword "RETURN 1"; do
            echo "Waiting for Neo4j to be ready..."
            sleep 5
          done

      - name: Run migrations
        env:
          NEO4J_BOLT_URL: bolt://neo4j:testpassword@localhost:7687
        run: |
          python manage.py migrate

      - name: Run tests
        env:
          NEO4J_BOLT_URL: bolt://neo4j:testpassword@localhost:7687
        run: |
          python manage.py test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to server
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          echo "${SSH_KEY}" > deploy_key.pem
          chmod 600 deploy_key.pem
          ssh -i deploy_key.pem ${SERVER_USER}@${SERVER_HOST} <<EOF
          cd /path/to/your/project
          git pull origin main
          source venv/bin/activate
          pip install -r requirements.txt
          python manage.py migrate
          sudo systemctl restart gunicorn
          sudo systemctl restart nginx
          EOF
